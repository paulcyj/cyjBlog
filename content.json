{"pages":[],"posts":[{"title":"Git基本操作","text":"浅度学习了一下git的使用方法Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 安装Git 各平台安装包下载地址为：http://git-scm.com/downloads 配置$ git config --global user.name &quot;xxx&quot;$ git config --global user.email test@xxx.com git clone$ git clone xxxx 提交代码作为初学者，我目前使用的是git gui进行push的操作Rscan对文件夹进行扫描，文件若有改动的话会显示在左侧，点击commit和push就可以了","link":"/2020/02/25/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"},{"title":"基于React与antd的网页建构（1）","text":"记录自己学习React碰到的问题本篇主要介绍环境配置 环境要求 Node.js V8以上 开发工具 我这里使用的是官方推荐的脚手架create-react-app，安装方法如下 npm install -g create-react-app[^网络不好的话可以使用淘宝的镜像] 引入antd组件 npx create-react-app antd-demonpm install antd -s 运行 npm start 文件结构 antd-demo├── .git # 隐藏文件夹，会初始化第一个 Commit 记录├── README.md├── node_modules├── package.json # 依赖配置文件├── .gitignore├── [floder_name] # 根目录下可以建立其他文件夹，但不会被用在生产环境中├── public # 只有 public 下的文件才能被 public/index.html 使用│ ├── favicon.ico│ ├── index.html # public/index.html 页面模板│ └── manifest.json└── src # 只有 src 下的文件才会被 Webpack 处理 ├── App.css ├── App.js ├── App.test.js ├── [floder_name] # 可以建立其他文件夹，以被 Webpack 成功导入 ├── index.css ├── index.js # JavaScript 打包入口文件 ├── logo.svg └── serviceWorker.js","link":"/2020/02/24/%E5%9F%BA%E4%BA%8EReact%E4%B8%8Eantd%E7%9A%84%E7%BD%91%E9%A1%B5%E5%BB%BA%E6%9E%84%EF%BC%881%EF%BC%89/"},{"title":"React的内外层路由配置","text":"记录自己学习React碰到的问题React与单纯html加js不同的地方在于其需要配置路由来实现不同功能组件的切换,因为React一切代码皆模组化。 第一步 使用npm安装react-router-domnpm install react-router-dom 第二步 根据项目需要新建文件夹，这里是我的文件结构 └── src # 只有 src 下的文件才会被 Webpack 处理 ├── components #框架文件夹 ├├──Frame ├ ├── index.js ├── index.js ├── views #组件文件夹 ├├──Login ├ ├── index.js ├── Dashboard ├ ├── index.js ├── Artical ├ ├── index.js ├── index.js ├── routs #路由文件夹 ├ ├── index.js ├── App.css ├── App.js ├── App.test.js ├── [floder_name] # 可以建立其他文件夹，以被 Webpack 成功导入 ├── index.css ├── index.js # JavaScript 打包入口文件 ├── logo.svg └── serviceWorker.js &gt; index.js皆为导出此文件夹组件 第三步 配置路由（范例组件以dashboard为例）12345678910 //views下的Dashboard组件 import React from 'react';import { Component } from 'react';export default class Dashboard extends Component{ render(){ return( &lt;div&gt;dashboard&lt;/div&gt; ) }} 12345678//导出views中的组件（views下的index.js） import Login from './Login';import Dashboard from './Dashboard';import Artical from './Artical';export{ Login, Dashboard, Artical 123456789101112131415161718192021222324252627//routes中配置内层路由import{ Login, Dashboard, Artical} from '../views'export const mainRouter= [ { pathname: '/login', component: Login }, { pathname: '/artical', component: Artical }, { pathname: '/dashboard', component: Dashboard } ]export const adminRouter= [ { pathname: '/admin/dashboard', component: Dashboard }] 12345678910111213//在项目打包入口文件处配置外层路由&lt;Router&gt; &lt;Switch&gt; &lt;Route path=\"/\" render={(routerProps)=&gt; { return &lt;App {...routerProps}/&gt; }}/&gt; { mainRouter.map(route =&gt;{ return&lt;Route key={route.pathname} path={route.pathname} component={route.component}/&gt; }) } &lt;/Switch&gt;&lt;/Router&gt;","link":"/2020/04/01/React%E7%9A%84%E5%86%85%E5%A4%96%E5%B1%82%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"},{"title":"网页置灰原理","text":"为奋斗在抗疫一线的人们致敬2020年4月4日,新冠病毒国家公祭日。当天许多网站都将自己的主页置灰，以此来纪念此次疫情去世的同胞。所以网页是如何置灰的?下面直接贴代码。 代码123456789101112 &lt;style&gt;body&gt;.footer,body&gt;.navbar,body&gt;.section{opacity:0}html { -webkit-filter: grayscale(100%); -moz-filter: grayscale(100%); -ms-filter: grayscale(100%); -o-filter: grayscale(100%); filter: grayscale(100%); filter: gray; filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);}&lt;/style&gt; 说明 grayscale()：将图像转换为灰度图像。值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0。filter 属性定义了元素(通常是)的可视效果(例如：模糊与饱和度)。","link":"/2020/04/04/%E7%BD%91%E9%A1%B5%E7%BD%AE%E7%81%B0/"},{"title":"js动态规划应用","text":"最近在整理leetcode中做到过的比较有意思的算法题，今天这篇就是其中之一。 动态规划定义首先还是要理一下基本概念，动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程。在动态规划算法中，将一个问题拆分成多个子问题，按顺序求解子问题，保留最有可能达到的局部最优解。 范例你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/house-robber 思路：首先前两间房屋最容易判断，只有一间就偷这间，有两间就偷其中一间。当大于两间时。 偷窃第x间就不能偷第x-1间，此时的偷窃总金额为x-2间与x间的总额。不偷窃第x间时，则是x-1间的最高总金额。于是就有 dp[x]=max(dp[x−2]+nums[x],dp[x−1]) 代码12345678910111213 var rob = function(nums) { const dp=[] let len=nums.length; dp[0]=0; dp[1]=nums[0]; if(len==0){ return 0; } for(var i=2;i&lt;=len;i++){ dp[i] = Math.max( dp[i-1], dp[i-2] + nums[i-1] ) } return dp[len]}; 说明 示例 1：输入：[1,2,3,1]输出：4解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。 偷窃到的最高金额 = 1 + 3 = 4 。","link":"/2020/06/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"title":"在GitHub上搭建hexo博客","text":"什么是hexohexo是一个快捷的博客框架，可以用来生成静态的博客页面 原理github仓库相当于服务器，存放hexo生成的index.html等文件的地方，而github pages是仓库的一个属性，github仓库在创建的时候是不能作为服务器的，需要设置githubpages属性才行。于是就有了利用hexo生成静态html文件通过git上传到github仓库中，用githubpages进行展示，最后使用 你的用户名.github.io 这个域名实现访问。 准备工作根据官方安装文档，电脑中需要装有1.Node.js (Should be at least Node.js 10.13, recommends 12.0 or higher)2.Git这两个的安装都很基础，这里就不赘述。附上链接：https://hexo.io/docs/ 安装环境与运行 安装基础框架npm install -g hexo 运行//生成静态页面hexo g//启动本地服务hexo s运行以后可以看到 Hexo is running at http://localhost:4000 ，表示就成功了。 创建GitHub仓库新建一个名称为你的用户名.github.io的仓库，今后就是通过这个访问。 创建后等几分钟。输入指令 hexo deploy/hexo d 。接着按照提示一步步配置GitHub密码等就可以了。","link":"/2020/08/17/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"动态规划","slug":"动态规划","link":"/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"categories":[]}